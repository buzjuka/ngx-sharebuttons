{"version":3,"file":"ngx-sharebuttons.umd.min.js","sources":["../../tmp/classes/google.class.ts","../../tmp/services/share-buttons.service.ts","../../tmp/modules/share-directive.module.ts","../../tmp/modules/share-button.module.ts","../../tmp/modules/share-buttons.module.ts","../../tmp/classes/facebook.class.ts","../../tmp/classes/twitter.class.ts","../../tmp/classes/linkedin.class.ts","../../tmp/classes/tumblr.class.ts","../../tmp/classes/whatsapp.class.ts","../../tmp/classes/pinterest.class.ts","../../tmp/classes/reddit.class.ts","../../tmp/classes/stumble.class.ts","../../tmp/classes/telegram.class.ts","../../tmp/classes/email.class.ts","../../tmp/classes/copy.class.ts","../../tmp/classes/print.class.ts","../../tmp/classes/vk.class.ts","../../tmp/classes/index.ts","../../tmp/modules/tokens.ts","../../tmp/services/universal-support.service.ts","../../tmp/directives/share-button.directive.ts","../../tmp/pipes/n-formatter.pipe.ts","../../tmp/components/share-button/share-button.component.ts","../../tmp/components/share-buttons/share-buttons.component.ts"],"sourcesContent":["/** GPLUS DOCS: https://developers.google.com/+/web/share/#sharelink */\n\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonProp } from '../models/share-buttons.models';\nexport class GoogleButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @return {?}\n */\nlink(url: string) {\n    return this.prop.shareUrl + url;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    const /** @type {?} */ body = getGoogleBody(url);\n\n    return this.http.post<ICount>(this.prop.countUrl, body)\n      .filter(res => res[0] && res[0].result && res[0].result.metadata\n        && res[0].result.metadata.globalCounts && res[0].result.metadata.globalCounts.count)\n      .map(res => +res[0].result.metadata.globalCounts.count)\n      .catch(err => Observable.empty());\n  }\n}\n\nfunction GoogleButton_tsickle_Closure_declarations() {\n/** @type {?} */\nGoogleButton.prototype.prop;\n/** @type {?} */\nGoogleButton.prototype.http;\n}\n\n/**\n * Prepare google count request body\n * @param {?} url\n * @return {?}\n */\nfunction getGoogleBody(url: string) {\n  return [{\n    method: 'pos.plusones.get',\n    id: 'p',\n    params: {\n      nolog: true,\n      id: url,\n      source: 'widget',\n      userId: '@viewer',\n      groupId: '@self'\n    },\n    jsonrpc: '2.0',\n    key: 'p',\n    apiVersion: 'v1'\n  }];\n}\n\n/** Google count interface */\n\ninterface GlobalCounts {\n  count: number;\n}\n\ninterface Metadata {\n  type: string;\n  globalCounts: GlobalCounts;\n}\n\ninterface Result {\n  kind: string;\n  id: string;\n  isSetByViewer: boolean;\n  metadata: Metadata;\n  abtk: string;\n}\n\ninterface ICount {\n  id: string;\n  result: Result;\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\nimport {\n  FacebookButton,\n  TwitterButton,\n  GoogleButton,\n  PinterestButton,\n  TumblrButton,\n  EmailButton,\n  PrintButton,\n  LinkedinButton,\n  VKontakteButton,\n  StumbleButton,\n  RedditButton,\n  WhatsappButton,\n  TelegramButton,\n  CopyButton,\n  Buttons\n} from '../classes/index';\nimport { BUTTONS_META, OPTIONS } from '../modules/tokens';\nexport class ShareButtonsService {\n/**\n * Global Options\n */\nallButtons = [\n    'facebook',\n    'twitter',\n    'linkedin',\n    'pinterest',\n    'google',\n    'stumble',\n    'reddit',\n    'whatsapp',\n    'tumblr',\n    'vk',\n    'telegram',\n    'email',\n    'copy',\n    'print'\n  ];\n/**\n * Default options\n */\noptions: ShareButtonsOptions = {\n    theme: 'default',\n    dialogWidth: 500,\n    dialogHeight: 400,\n    include: this.allButtons,\n    exclude: [],\n    size: 0,\n    title: null,\n    image: null,\n    description: null,\n    tags: null,\n    gaTracking: false,\n    twitterAccount: null\n  };\n/**\n * Buttons' Config\n */\nmeta: ShareButtonsMeta = Buttons;\n/**\n * @param {?} http\n * @param {?} options\n * @param {?} meta\n */\nconstructor(private http: HttpClient,\n     options: ShareButtonsOptions,\n     meta: ShareButtonsMeta) {\n\n    /** Override global options with user's preference */\n    this.options = mergeDeep(this.options, options);\n    this.meta = mergeDeep(this.meta, meta);\n  }\n/**\n * @return {?}\n */\nget twitterAccount() {\n    return this.options.twitterAccount;\n  }\n/**\n * @return {?}\n */\nget dialogSize() {\n    return `width=${this.options.dialogWidth}, height=${this.options.dialogHeight}`;\n  }\n/**\n * Get all wanted buttons\n * @return {?}\n */\nget buttons() {\n    if (!this.options.exclude.length) {\n      return this.options.include;\n    }\n    return this.options.include.filter((btn) => this.options.exclude.indexOf(btn) < 0);\n  }\n/**\n * @return {?}\n */\nget theme() {\n    return this.options.theme;\n  }\n/**\n * Global meta tags\n * @return {?}\n */\nget title() {\n    return this.options.title;\n  }\n/**\n * @return {?}\n */\nget description() {\n    return this.options.description;\n  }\n/**\n * @return {?}\n */\nget image() {\n    return this.options.image;\n  }\n/**\n * @return {?}\n */\nget tags() {\n    return this.options.tags;\n  }\n/**\n * @return {?}\n */\nget gaTracking() {\n    return this.options.gaTracking;\n  }\n/**\n * @return {?}\n */\nget size() {\n    return this.options.size;\n  }\n/**\n * @param {?} buttonName\n * @return {?}\n */\ncreateShareButton(buttonName: string) {\n\n    switch (buttonName.toLowerCase()) {\n      case this.meta.facebook.type:\n        return new FacebookButton(this.meta.facebook, this.http);\n      case this.meta.twitter.type:\n        return new TwitterButton(this.meta.twitter);\n      case this.meta.google.type:\n        return new GoogleButton(this.meta.google, this.http);\n      case this.meta.pinterest.type:\n        return new PinterestButton(this.meta.pinterest, this.http);\n      case this.meta.linkedin.type:\n        return new LinkedinButton(this.meta.linkedin, this.http);\n      case this.meta.reddit.type:\n        return new RedditButton(this.meta.reddit, this.http);\n      case this.meta.tumblr.type:\n        return new TumblrButton(this.meta.tumblr, this.http);\n      case this.meta.stumble.type:\n        return new StumbleButton(this.meta.stumble);\n      case this.meta.whatsapp.type:\n        return new WhatsappButton(this.meta.whatsapp);\n      case this.meta.vk.type:\n        return new VKontakteButton(this.meta.vk);\n      case this.meta.telegram.type:\n        return new TelegramButton(this.meta.telegram);\n      case this.meta.email.type:\n        return new EmailButton(this.meta.email);\n      case this.meta.copy.type:\n        return new CopyButton(this.meta.copy);\n      case this.meta.print.type:\n        return new PrintButton(this.meta.print);\n      default:\n        return null;\n    }\n  }\n/**\n * Determine the mobile operating system.\n * This function returns one of 'iOS', 'Android', 'Windows Phone', or 'unknown'.\n * \n * @return {?}\n */\ngetMobileOS() {\n    const /** @type {?} */ userAgent = navigator.userAgent || navigator.vendor || window['opera'];\n\n    // Windows Phone must come first because its UA also contains \"Android\"\n    if (/windows phone/i.test(userAgent)) {\n     return 'WindowsPhone';\n    }\n\n    if (/android/i.test(userAgent)) {\n     return 'Android';\n    }\n\n    // iOS detection from: http://stackoverflow.com/a/9039885/177710\n    if (/iPad|iPhone|iPod/.test(userAgent) && !window['MSStream']) {\n     return 'iOS';\n    }\n\n    return undefined;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: undefined, decorators: [{ type: Inject, args: [OPTIONS, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [BUTTONS_META, ] }, ]},\n];\n}\n\nfunction ShareButtonsService_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonsService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonsService.ctorParameters;\n/**\n * Global Options\n * @type {?}\n */\nShareButtonsService.prototype.allButtons;\n/**\n * Default options\n * @type {?}\n */\nShareButtonsService.prototype.options;\n/**\n * Buttons' Config\n * @type {?}\n */\nShareButtonsService.prototype.meta;\n/** @type {?} */\nShareButtonsService.prototype.http;\n}\n\n/**\n * Simple object check.\n * @param {?} item\n * @return {?}\n */\nfunction isObject(item) {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}\n/**\n * Deep merge two objects.\n * @param {?} target\n * @param {...?} sources\n * @return {?}\n */\nfunction mergeDeep(target, ...sources) {\n  if (!sources.length) {\n    return target;\n  }\n  const /** @type {?} */ source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const /** @type {?} */ key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, { [key]: {} });\n        }\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, { [key]: source[key] });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, InjectionToken } from '@angular/core';\nimport { HttpClient, HttpClientJsonpModule, HttpClientModule } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\n\nimport { ShareButtonsService } from '../services/share-buttons.service';\nimport { ShareButtonDirective } from '../directives/share-button.directive';\nimport { NFormatterPipe } from '../pipes/n-formatter.pipe';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\nimport { UniversalSupportService } from '../services/universal-support.service';\nimport { OPTIONS, BUTTONS_META } from './tokens';\n/**\n * @param {?} httpClient\n * @param {?} options\n * @param {?} buttonsMeta\n * @return {?}\n */\nexport function ShareButtonsFactory(httpClient: HttpClient, options: ShareButtonsOptions, buttonsMeta: ShareButtonsMeta) {\n  return new ShareButtonsService(httpClient, options, buttonsMeta);\n}\nexport class ShareDirectiveModule {\n/**\n * @param {?=} options\n * @param {?=} buttonsMeta\n * @return {?}\n */\nstatic forRoot(options?: ShareButtonsOptions, buttonsMeta?: ShareButtonsMeta) {\n    return {\n      ngModule: ShareDirectiveModule,\n      providers: [\n        {provide: OPTIONS, useValue: options},\n        {provide: BUTTONS_META, useValue: buttonsMeta},\n        {\n          provide: ShareButtonsService,\n          useFactory: ShareButtonsFactory,\n          deps: [HttpClient, OPTIONS, BUTTONS_META]\n        }\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    ShareButtonDirective,\n    NFormatterPipe\n  ],\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    HttpClientJsonpModule\n  ],\n  exports: [\n    CommonModule,\n    ShareButtonDirective,\n    NFormatterPipe\n  ],\n  providers: [ UniversalSupportService ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShareDirectiveModule_tsickle_Closure_declarations() {\n/** @type {?} */\nShareDirectiveModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareDirectiveModule.ctorParameters;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, InjectionToken } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ShareDirectiveModule } from './share-directive.module';\n\nimport { ShareButtonsService } from '../services/share-buttons.service';\nimport { ShareButtonComponent } from '../components/share-button/share-button.component';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\nimport { OPTIONS, BUTTONS_META } from './tokens';\n/**\n * @param {?} httpClient\n * @param {?} options\n * @param {?} buttonsMeta\n * @return {?}\n */\nexport function ShareButtonsFactory(httpClient: HttpClient, options: ShareButtonsOptions, buttonsMeta: ShareButtonsMeta) {\n  return new ShareButtonsService(httpClient, options, buttonsMeta);\n}\nexport class ShareButtonModule {\n/**\n * @param {?=} options\n * @param {?=} buttonsMeta\n * @return {?}\n */\nstatic forRoot(options?: ShareButtonsOptions, buttonsMeta?: ShareButtonsMeta) {\n    return {\n      ngModule: ShareButtonModule,\n      providers: [\n        {provide: OPTIONS, useValue: options},\n        {provide: BUTTONS_META, useValue: buttonsMeta},\n        {\n          provide: ShareButtonsService,\n          useFactory: ShareButtonsFactory,\n          deps: [HttpClient, OPTIONS, BUTTONS_META]\n        }\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    ShareButtonComponent\n  ],\n  imports: [\n    ShareDirectiveModule\n  ],\n  exports: [\n    ShareDirectiveModule,\n    ShareButtonComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShareButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonModule.ctorParameters;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, InjectionToken } from '@angular/core';\n\nimport { ShareButtonModule } from './share-button.module';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ShareButtonsService } from '../services/share-buttons.service';\nimport { ShareButtonsComponent } from '../components/share-buttons/share-buttons.component';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\nimport { OPTIONS, BUTTONS_META } from './tokens';\n/**\n * @param {?} httpClient\n * @param {?} options\n * @param {?} buttonsMeta\n * @return {?}\n */\nexport function ShareButtonsFactory(httpClient: HttpClient, options: ShareButtonsOptions, buttonsMeta: ShareButtonsMeta) {\n  return new ShareButtonsService(httpClient, options, buttonsMeta);\n}\nexport class ShareButtonsModule {\n/**\n * @param {?=} options\n * @param {?=} buttonsMeta\n * @return {?}\n */\nstatic forRoot(options?: ShareButtonsOptions, buttonsMeta?: ShareButtonsMeta) {\n    return {\n      ngModule: ShareButtonsModule,\n      providers: [\n        {provide: OPTIONS, useValue: options},\n        {provide: BUTTONS_META, useValue: buttonsMeta},\n        {\n          provide: ShareButtonsService,\n          useFactory: ShareButtonsFactory,\n          deps: [HttpClient, OPTIONS, BUTTONS_META]\n        }\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    ShareButtonsComponent\n  ],\n  imports: [\n    ShareButtonModule\n  ],\n  exports: [\n    ShareButtonModule,\n    ShareButtonsComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ShareButtonsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonsModule.ctorParameters;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonProp } from '../models/share-buttons.models';\nexport class FacebookButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @return {?}\n */\nlink(url: string) {\n\n    return this.prop.shareUrl + url;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    return this.http.get<ICount>(this.prop.countUrl + url)\n      .filter(res => !!(res.share && res.share.share_count))\n      .map(res => +res.share.share_count)\n      .catch(err => Observable.empty());\n  }\n}\n\nfunction FacebookButton_tsickle_Closure_declarations() {\n/** @type {?} */\nFacebookButton.prototype.prop;\n/** @type {?} */\nFacebookButton.prototype.http;\n}\n\n\n/** Facebook Count interface */\n\ninterface Share {\n  comment_count: number;\n  share_count: number;\n}\n\ninterface OgObject {\n  id: string;\n  description: string;\n  title: string;\n  type: string;\n  updated_time: Date;\n}\n\ninterface ICount {\n  share: Share;\n  og_object: OgObject;\n  id: string;\n}\n","/** TWITTER DOCS: https://dev.twitter.com/web/tweet-button/web-intent */\n\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class TwitterButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    if (args.description) {\n      shareUrl += '&text=' + args.description;\n    }\n\n    if (args.via) {\n      shareUrl += '&via=' + args.via;\n    }\n\n    if (args.tags) {\n      shareUrl += '&hashtags=' + args.tags;\n    }\n\n    return shareUrl;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n\n}\n\nfunction TwitterButton_tsickle_Closure_declarations() {\n/** @type {?} */\nTwitterButton.prototype.prop;\n}\n\n","/** LINKEDIN DOCS https://developer.linkedin.com/docs/share-on-linkedin#! */\n\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nexport class LinkedinButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    if (args.title) {\n      shareUrl += '&title=' + args.title;\n    }\n    if (args.description) {\n      shareUrl += '&summary=' + args.description;\n    }\n\n    return shareUrl;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    return this.http.jsonp<ICount>(this.prop.countUrl + url, 'callback')\n      .filter(res => !!res.count)\n      .map(res => +res.count)\n      .catch(err => Observable.empty());\n  }\n}\n\nfunction LinkedinButton_tsickle_Closure_declarations() {\n/** @type {?} */\nLinkedinButton.prototype.prop;\n/** @type {?} */\nLinkedinButton.prototype.http;\n}\n\n\n/** LinkedIn count interface */\n\nexport interface ICount {\n  count: number;\n  fCnt: string;\n  fCntPlusOne: string;\n  url: string;\n}\n","/** TUMBLR DOCS: https://www.tumblr.com/docs/en/share_button */\n\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nexport class TumblrButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    if (args.description) {\n      shareUrl += '&caption=' + args.description;\n    }\n\n    if (args.tags) {\n      shareUrl += '&tags=' + args.tags;\n    }\n\n    return shareUrl;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    return this.http.jsonp<ICount>(this.prop.countUrl + url, 'callback')\n      .filter(res => !!(res.response && res.response.note_count))\n      .map(res => +res.response.note_count)\n      .catch(err => Observable.empty());\n  }\n}\n\nfunction TumblrButton_tsickle_Closure_declarations() {\n/** @type {?} */\nTumblrButton.prototype.prop;\n/** @type {?} */\nTumblrButton.prototype.http;\n}\n\n\n/** Tumblr count interface*/\n\ninterface Meta {\n  status: number;\n  msg: string;\n}\n\ninterface Response {\n  url: string;\n  note_count: number;\n}\n\ninterface ICount {\n  meta: Meta;\n  response: Response;\n}\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class WhatsappButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl;\n\n    if (args.description) {\n      shareUrl += args.description + ' %0A';\n    }\n\n    return shareUrl + url;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n\n}\n\nfunction WhatsappButton_tsickle_Closure_declarations() {\n/** @type {?} */\nWhatsappButton.prototype.prop;\n}\n\n","import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nexport class PinterestButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    /** The description and the image are required to get the pin button to work. */\n\n    if (args.description) {\n      shareUrl += '&description=' + args.description;\n    } else if (document) {\n/**\n * If user didn't add description, get it from the OG meta tag\n */\nconst ogDescription: Element = document.querySelector('meta[property=\"og:description\"]');\n      if (ogDescription) {\n        shareUrl += '&description=' + ogDescription.getAttribute('content');\n      } else {\n        console.warn('[ShareButtons]: You didn\\'t set the description text for Pinterest button');\n      }\n    }\n\n    if (args.image) {\n      shareUrl += '&media=' + args.image;\n    } else if (document) {\n      const /** @type {?} */ ogImage: Element = document.querySelector('meta[property=\"og:image\"]');\n      if (ogImage) {\n        shareUrl += '&media=' + ogImage.getAttribute('content');\n      } else {\n        console.warn('[ShareButtons]: You didn\\'t set the image URL for Pinterest button');\n      }\n    }\n\n    return shareUrl;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    return this.http.get(this.prop.countUrl + url, {responseType: 'text'})\n      .map(text => /** @type {?} */(( <ICount>JSON.parse(text.replace(/^receiveCount\\((.*)\\)/, '$1')))))\n      .filter(res => !!res.count)\n      .map(res => +res.count)\n      .catch(err => Observable.empty());\n  }\n\n}\n\nfunction PinterestButton_tsickle_Closure_declarations() {\n/** @type {?} */\nPinterestButton.prototype.prop;\n/** @type {?} */\nPinterestButton.prototype.http;\n}\n\n\n/** Pinterest count interface */\n\ninterface ICount {\n  url: string;\n  count: number;\n}\n","/** REDDIT DOCS: http://stackoverflow.com/questions/24823114/post-to-reddit-via-url */\n\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nexport class RedditButton implements IShareButton {\n/**\n * @param {?} prop\n * @param {?} http\n */\nconstructor(public prop: ShareButtonProp,\nprivate http: HttpClient) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    if (args.title) {\n      shareUrl += '&title=' + args.title;\n    }\n\n    return shareUrl;\n  }\n/**\n * @param {?} url\n * @return {?}\n */\ncount(url: string) {\n\n    return this.http.get<ICount>(this.prop.countUrl + url)\n      .filter(res => !!(res.data && res.data.children && res.data.children.length))\n      .map(res => +res.data.children[0].data.score)\n      .catch(err => Observable.empty());\n  }\n}\n\nfunction RedditButton_tsickle_Closure_declarations() {\n/** @type {?} */\nRedditButton.prototype.prop;\n/** @type {?} */\nRedditButton.prototype.http;\n}\n\n\n\n/** Reddit count interface */\n\ninterface Source {\n  url: string;\n  width: number;\n  height: number;\n}\n\ninterface Resolution {\n  url: string;\n  width: number;\n  height: number;\n}\n\ninterface Image {\n  source: Source;\n  resolutions: Resolution[];\n  id: string;\n}\n\ninterface Preview {\n  images: Image[];\n  enabled: boolean;\n}\n\ninterface Data2 {\n  domain: string;\n  approved_at_utc?: any;\n  banned_by?: any;\n  thumbnail_width: number;\n  subreddit: string;\n  selftext_html?: any;\n  selftext: string;\n  likes?: any;\n  suggested_sort?: any;\n  user_reports: any[];\n  secure_media?: any;\n  link_flair_text?: any;\n  id: string;\n  banned_at_utc?: any;\n  view_count?: any;\n  archived: boolean;\n  clicked: boolean;\n  report_reasons?: any;\n  title: string;\n  media?: any;\n  mod_reports: any[];\n  can_mod_post: boolean;\n  author_flair_text?: any;\n  score: number;\n  approved_by?: any;\n  over_18: boolean;\n  hidden: boolean;\n  preview: Preview;\n  thumbnail: string;\n  subreddit_id: string;\n  edited: boolean;\n  link_flair_css_class?: any;\n  author_flair_css_class?: any;\n  contest_mode: boolean;\n  gilded: number;\n  downs: number;\n  brand_safe: boolean;\n  saved: boolean;\n  removal_reason?: any;\n  post_hint: string;\n  stickied: boolean;\n  can_gild: boolean;\n  thumbnail_height: number;\n  parent_whitelist_status?: any;\n  name: string;\n  spoiler: boolean;\n  permalink: string;\n  subreddit_type: string;\n  locked: boolean;\n  hide_score: boolean;\n  created: number;\n  url: string;\n  whitelist_status?: any;\n  quarantine: boolean;\n  author: string;\n  created_utc: number;\n  subreddit_name_prefixed: string;\n  ups: number;\n  num_comments: number;\n  is_self: boolean;\n  visited: boolean;\n  num_reports?: any;\n  is_video: boolean;\n  distinguished?: any;\n}\n\ninterface Child {\n  kind: string;\n  data: Data2;\n}\n\ninterface Data {\n  modhash: string;\n  children: Child[];\n  after?: any;\n  before?: any;\n}\n\ninterface ICount {\n  kind: string;\n  data: Data;\n}\n","/** STUMBLE DOCS: http://stackoverflow.com/questions/10591424/how-can-i-create-a-custom-stumbleupon-button */\n\nimport { IShareButton, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class StumbleButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @return {?}\n */\nlink(url: string) {\n\n    return this.prop.shareUrl + url;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n}\n\nfunction StumbleButton_tsickle_Closure_declarations() {\n/** @type {?} */\nStumbleButton.prototype.prop;\n}\n\n\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class TelegramButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + url;\n\n    if (args.description) {\n      shareUrl += '&text=' + args.description;\n    }\n\n    return shareUrl;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n\n}\n\nfunction TelegramButton_tsickle_Closure_declarations() {\n/** @type {?} */\nTelegramButton.prototype.prop;\n}\n\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/Observable';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class EmailButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    let /** @type {?} */ shareUrl = this.prop.shareUrl + args.email;\n\n    if (args.title) {\n      shareUrl += '&subject=' + args.title;\n    }\n\n    shareUrl += '&body=';\n    if (args.description) {\n      shareUrl += args.description + ' %0A';\n    }\n\n    return shareUrl + url;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n\n}\n\nfunction EmailButton_tsickle_Closure_declarations() {\n/** @type {?} */\nEmailButton.prototype.prop;\n}\n\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { ShareButtonDirective } from '../directives/share-button.directive';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/delay';\nimport'rxjs/add/operator/take';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class CopyButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n    this.copyURLToClipboard(url, args.directive);\n    return null;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n/**\n * copy URL to clipboard\n * @param {?} url\n * @param {?} directive\n * @return {?}\n */\ncopyURLToClipboard(url: string, directive: ShareButtonDirective) {\n\n    const /** @type {?} */ temp = {text: directive.shareButton.prop.text, icon: directive.shareButton.prop.icon};\n    Observable.of({}).take(1).do(() => {\n        url = decodeURIComponent(url);\n        const /** @type {?} */ textArea = directive.renderer.createElement('textarea');\n\n        // Place in top-left corner of screen regardless of scroll position.\n        directive.renderer.setStyle(textArea, 'position', 'fixed');\n        directive.renderer.setStyle(textArea, 'top', 0);\n        directive.renderer.setStyle(textArea, 'left', 0);\n\n        // Ensure it has a small width and height. Setting to 1px / 1em\n        // doesn't work as directive gives a negative w/h on some browsers.\n        directive.renderer.setStyle(textArea, 'width', '2em');\n        directive.renderer.setStyle(textArea, 'height', '2em');\n\n        // We don't need padding, reducing the size if it does flash render\n        directive.renderer.setStyle(textArea, 'padding', 0);\n\n        // Clean up any borders.\n        directive.renderer.setStyle(textArea, 'border', 'none');\n        directive.renderer.setStyle(textArea, 'outline', 'none');\n        directive.renderer.setStyle(textArea, 'boxShadow', 'none');\n\n        // Avoid flash of white box if rendered for any reason.\n        directive.renderer.setStyle(textArea, 'background', 'transparent');\n        directive.renderer.setProperty(textArea, 'value', url);\n        directive.renderer.appendChild(directive.el, textArea);\n\n        textArea.select();\n\n        document.execCommand('copy');\n\n        directive.renderer.removeChild(directive.el, textArea);\n\n        directive.shareButton.prop.text = this.prop.successText;\n        directive.shareButton.prop.icon = this.prop.successIcon;\n        directive.cd.markForCheck();\n      },\n      () => {\n        directive.shareButton.prop.text = this.prop.failText;\n        directive.shareButton.prop.icon = this.prop.failIcon;\n        directive.cd.markForCheck();\n        console.warn('[ShareButtons]: Print button could not copy URL to clipboard');\n      })\n      .delay(2000)\n      .do(() => {\n        directive.shareButton.prop.text = temp.text;\n        directive.shareButton.prop.icon = temp.icon;\n        directive.cd.markForCheck();\n      })\n      .subscribe();\n\n  }\n\n}\n\nfunction CopyButton_tsickle_Closure_declarations() {\n/** @type {?} */\nCopyButton.prototype.prop;\n}\n\n","import { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class PrintButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n\n    args.directive.window.print();\n    return null;\n  }\n/**\n * @return {?}\n */\ncount() {\n\n    return Observable.empty();\n  }\n\n}\n\nfunction PrintButton_tsickle_Closure_declarations() {\n/** @type {?} */\nPrintButton.prototype.prop;\n}\n\n","/** VK DOCS: https://vk.com/dev/widget_share */\n\n\nimport { IShareButton, ShareButtonArgs, ShareButtonProp } from '../models/share-buttons.models';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class VKontakteButton implements IShareButton {\n/**\n * @param {?} prop\n */\nconstructor(public prop: ShareButtonProp) {\n  }\n/**\n * @param {?} url\n * @param {?=} args\n * @return {?}\n */\nlink(url: string, args?: ShareButtonArgs) {\n    return this.prop.shareUrl + url;\n  }\n/**\n * @return {?}\n */\ncount() {\n    return Observable.empty();\n  }\n\n}\n\nfunction VKontakteButton_tsickle_Closure_declarations() {\n/** @type {?} */\nVKontakteButton.prototype.prop;\n}\n\n","export {FacebookButton} from './facebook.class';\nexport {TwitterButton} from './twitter.class';\nexport {LinkedinButton,ICount} from './linkedin.class';\nexport {TumblrButton} from './tumblr.class';\nexport {WhatsappButton} from './whatsapp.class';\nexport {PinterestButton} from './pinterest.class';\nexport {RedditButton} from './reddit.class';\nexport {GoogleButton} from './google.class';\nexport {StumbleButton} from './stumble.class';\nexport {TelegramButton} from './telegram.class';\nexport {EmailButton} from './email.class';\nexport {CopyButton} from './copy.class';\nexport {PrintButton} from './print.class';\nexport {VKontakteButton} from './vk.class';\n\nexport const /** @type {?} */ Buttons = {\n  facebook: {\n    type: 'facebook',\n    text: 'Facebook',\n    icon: 'fa fa-facebook',\n    color: '#3b5998',\n    supportCount: true,\n    shareUrl: 'https://www.facebook.com/sharer/sharer.php?u=',\n    androidUrl: 'com.facebook.katana',\n    iosUrl: 'fb://',\n    countUrl: 'https://graph.facebook.com?id='\n  },\n  twitter: {\n    type: 'twitter',\n    text: 'Twitter',\n    icon: 'fa fa-twitter',\n    color: '#00acee',\n    supportCount: true,\n    shareUrl: 'https://twitter.com/intent/tweet?url=',\n    androidUrl: 'com.twitter.package',\n    iosUrl: 'twitter://tweet?url='\n  },\n  google: {\n    type: 'google',\n    text: 'Google+',\n    icon: 'fa fa-google-plus',\n    color: '#DB4437',\n    supportCount: true,\n    shareUrl: 'https://plus.google.com/share?url=',\n    androidUrl: '',\n    iosUrl: '',\n    countUrl: 'https://clients6.google.com/rpc?key=AIzaSyCKSbrvQasunBoV16zDH9R33D88CeLr9gQ'\n  },\n  linkedin: {\n    type: 'linkedin',\n    text: 'LinkedIn',\n    icon: 'fa fa-linkedin',\n    color: '#006fa6',\n    supportCount: true,\n    shareUrl: 'http://www.linkedin.com/shareArticle?url=',\n    androidUrl: 'com.linkedin.android',\n    iosUrl: 'linkedin://',\n    countUrl: 'https://www.linkedin.com/countserv/count/share?url='\n  },\n  pinterest: {\n    type: 'pinterest',\n    text: 'Pinterest',\n    icon: 'fa fa-pinterest-p',\n    color: '#BD091D',\n    supportCount: true,\n    shareUrl: 'https://in.pinterest.com/pin/create/button/?url=',\n    androidUrl: '',\n    iosUrl: '',\n    countUrl: 'https://api.pinterest.com/v1/urls/count.json?callback=receiveCount&url='\n  },\n  reddit: {\n    type: 'reddit',\n    text: 'Reddit',\n    icon: 'fa fa-reddit-alien',\n    color: '#FF4006',\n    supportCount: true,\n    shareUrl: 'http://www.reddit.com/submit?url=',\n    androidUrl: '',\n    iosUrl: '',\n    countUrl: 'https://buttons.reddit.com/button_info.json?url='\n  },\n  tumblr: {\n    type: 'tumblr',\n    text: 'Tumblr',\n    icon: 'fa fa-tumblr',\n    color: '#36465D',\n    supportCount: true,\n    shareUrl: 'http://tumblr.com/widgets/share/tool?canonicalUrl=',\n    androidUrl: '',\n    iosUrl: '',\n    countUrl: 'https://api.tumblr.com/v2/share/stats?url='\n  },\n  print: {\n    type: 'print',\n    text: 'Print',\n    icon: 'fa fa-print',\n    color: 'brown',\n    supportCount: false\n  },\n  stumble: {\n    type: 'stumble',\n    text: 'Stumble',\n    icon: 'fa fa-stumbleupon',\n    color: '#eb4924',\n    supportCount: false,\n    shareUrl: 'http://www.stumbleupon.com/submit?url=',\n    androidUrl: '',\n    iosUrl: ''\n  },\n  telegram: {\n    type: 'telegram',\n    text: 'Telegram',\n    icon: 'fa fa-send',\n    color: '#0088cc',\n    supportCount: false,\n    shareUrl: 'https://t.me/share/url?url=',\n    androidUrl: '',\n    iosUrl: ''\n  },\n  vk: {\n    type: 'vk',\n    text: 'VKontakte',\n    icon: 'fa fa-vk',\n    color: '#4C75A3',\n    supportCount: false,\n    shareUrl: 'http://vk.com/share.php?url=',\n    androidUrl: '',\n    iosUrl: ''\n  },\n  copy: {\n    type: 'copy',\n    text: 'Copy link',\n    successText: 'Copied',\n    successIcon: 'fa fa-check',\n    failText: 'Error',\n    failIcon: 'fa fa-exclamation',\n    icon: 'fa fa-link',\n    color: '#607D8B',\n    supportCount: false\n  },\n  whatsapp: {\n    type: 'whatsapp',\n    text: 'WhatsApp',\n    icon: 'fa fa-whatsapp',\n    color: '#25D366',\n    supportCount: true,\n    shareUrl: 'https://web.whatsapp.com/send?text=',\n    androidUrl: 'com.whatsapp.package',\n    iosUrl: 'whatsapp://?text='\n  },\n  email: {\n    type: 'email',\n    text: 'Email',\n    icon: 'fa fa-envelope',\n    color: '#32A1A3',\n    supportCount: false,\n    shareUrl: 'mailto:?'\n  }\n};\n","import { InjectionToken } from '@angular/core';\nimport { ShareButtonsMeta, ShareButtonsOptions } from '../models/share-buttons.models';\n\nexport const /** @type {?} */ OPTIONS = new InjectionToken<ShareButtonsOptions>('OPTIONS');\nexport const /** @type {?} */ BUTTONS_META = new InjectionToken<ShareButtonsMeta>('BUTTONS_META');\n","import { Injectable } from '@angular/core';\n\ndeclare const global: any;\ndeclare const window: any;\nexport class UniversalSupportService {\n/**\n * @return {?}\n */\nget nativeWindow() {\n        try {\n            return window;\n        } catch ( /** @type {?} */e) {\n          return global;\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniversalSupportService_tsickle_Closure_declarations() {\n/** @type {?} */\nUniversalSupportService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniversalSupportService.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  HostListener,\n  EventEmitter,\n  ElementRef,\n  Renderer2,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { ShareButtonsService } from '../services/share-buttons.service';\nimport { IShareButton } from '../models/share-buttons.models';\nimport { UniversalSupportService } from '../services/universal-support.service';\n\n/** Google analytics ref */\ndeclare const ga: Function;\nexport class ShareButtonDirective {\n/**\n * Window ref that supports Universal\n */\nwindow: Window;\n/**\n * Element ref\n */\nel: HTMLElement;\n/**\n * Share button type\n */\nshareButton: IShareButton;\n/**\n * Validated share URL\n */\nurl: string;\n/**\n * Share meta tags\n */\nsbTitle = this.share.title;\n   sbDescription = this.share.description;\n   sbImage = this.share.image;\n   sbTags = this.share.tags;\n/**\n * Set button class, e.g. 'sb-facebook'\n */\nbuttonClass: string;\n/**\n * Set share button e.g facebook, twitter...etc\n * @param {?} buttonName\n * @return {?}\n */\nset createButton(buttonName: string) {\n/**\n * Create a new button of type <buttonName>\n */\nconst button = this.share.createShareButton(buttonName);\n\n    if (button) {\n      this.shareButton = button;\n\n      /** Remove old button class in case user changed the button */\n      this.renderer.removeClass(this.el, 'sb-' + this.buttonClass);\n\n      /** Add new button class e.g.: sb-facebook, sb-twitter ...etc */\n      this.renderer.addClass(this.el, 'sb-' + button.prop.type);\n\n      /** Keep a copy of current class */\n      this.buttonClass = button.prop.type;\n\n      /** Get link's shared count */\n      this.getCount();\n    } else {\n      throw new Error(`[ShareButtons]: The share button \"${buttonName}\" does not exist. Make sure the button name is correct!`);\n    }\n  }\n/**\n * Set share URL\n * @param {?} url\n * @return {?}\n */\nset sbUrl(url: string) {\n\n    /** Check if current URL equals previous URL */\n    if (url !== this.url) {\n      this.url = this.validateUrl(url);\n      this.getCount();\n    }\n  }\n/**\n * Google analytics tracking\n */\ngaTracking = this.share.gaTracking;\n/**\n * Share count event\n */\nsbCount = new EventEmitter<number>();\n/**\n * Share dialog opened event\n */\nsbOpened = new EventEmitter<string>();\n/**\n * Share dialog closed event\n */\nsbClosed = new EventEmitter<string>();\n/**\n * @param {?} share\n * @param {?} renderer\n * @param {?} cd\n * @param {?} el\n * @param {?} universal\n */\nconstructor(private share: ShareButtonsService,\npublic renderer: Renderer2,\npublic cd: ChangeDetectorRef,\n    el: ElementRef,\n    universal: UniversalSupportService) {\n    this.el = el.nativeElement;\n    this.window = universal.nativeWindow;\n  }\n/**\n * Open share dialog\n * @return {?}\n */\nonClick() {\n    /** Set user did not set the url using [sbUrl], use window URL */\n    if (!this.url) {\n      this.url = encodeURIComponent(this.window.location.href);\n    }\n/**\n * Get sharing link\n */\nconst shareUrl = this.shareButton.link(this.url, {\n      title: this.sbTitle,\n      description: this.sbDescription,\n      image: this.sbImage,\n      tags: this.sbTags,\n      mobile: this.share.getMobileOS(),\n      via: this.share.twitterAccount,\n      directive: this\n    });\n\n    /** GA tracking */\n    if (this.gaTracking && typeof ga !== 'undefined') {\n      ga('send', 'social', this.shareButton.prop.type, 'click', this.url);\n    }\n\n    let /** @type {?} */ popUp;\n    if (shareUrl) {\n      /** Open share dialog */\n      popUp = this.window.open(shareUrl, 'newwindow', this.share.dialogSize);\n    }\n\n    /** Emit opened dialog type */\n    this.sbOpened.emit(this.shareButton.prop.type);\n\n    /** If dialog closed event has subscribers, emit closed dialog type */\n    if (this.sbClosed.observers.length && popUp) {\n      const /** @type {?} */ pollTimer = this.window.setInterval(() => {\n        if (popUp.closed) {\n          this.window.clearInterval(pollTimer);\n          this.sbClosed.emit(this.shareButton.prop.type);\n        }\n      }, 200);\n    }\n\n  }\n/**\n * @return {?}\n */\ngetCount() {\n    /** Only if share count has observers & the button has support for share count */\n    if (this.url && this.sbCount.observers.length && this.shareButton.prop.supportCount) {\n\n      /** Emit share count to (sbCount) Output */\n      this.shareButton.count(this.url).subscribe((count: number) => this.sbCount.emit(count));\n    }\n  }\n/**\n * @param {?} url\n * @return {?}\n */\nvalidateUrl(url: string) {\n    /** Use encodeURIComponent to let URLs with the hash location strategy to work in tweets */\n\n    if (url) {\n      const /** @type {?} */ r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n\n      if (r.test(url)) {\n        return encodeURIComponent(url);\n      }\n      console.warn(`[ShareButtons]: The share URL \"${url}\" is invalid!`);\n    }\n    /** fallback to current page URL */\n    return encodeURIComponent(this.window.location.href);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[shareButton]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ShareButtonsService, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: ElementRef, },\n{type: UniversalSupportService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'sbTitle': [{ type: Input },],\n'sbDescription': [{ type: Input },],\n'sbImage': [{ type: Input },],\n'sbTags': [{ type: Input },],\n'createButton': [{ type: Input, args: ['shareButton', ] },],\n'sbUrl': [{ type: Input },],\n'gaTracking': [{ type: Input },],\n'sbCount': [{ type: Output },],\n'sbOpened': [{ type: Output },],\n'sbClosed': [{ type: Output },],\n'onClick': [{ type: HostListener, args: ['click', ] },],\n};\n}\n\nfunction ShareButtonDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonDirective.ctorParameters;\n/** @type {?} */\nShareButtonDirective.propDecorators;\n/**\n * Window ref that supports Universal\n * @type {?}\n */\nShareButtonDirective.prototype.window;\n/**\n * Element ref\n * @type {?}\n */\nShareButtonDirective.prototype.el;\n/**\n * Share button type\n * @type {?}\n */\nShareButtonDirective.prototype.shareButton;\n/**\n * Validated share URL\n * @type {?}\n */\nShareButtonDirective.prototype.url;\n/**\n * Share meta tags\n * @type {?}\n */\nShareButtonDirective.prototype.sbTitle;\n/** @type {?} */\nShareButtonDirective.prototype.sbDescription;\n/** @type {?} */\nShareButtonDirective.prototype.sbImage;\n/** @type {?} */\nShareButtonDirective.prototype.sbTags;\n/**\n * Set button class, e.g. 'sb-facebook'\n * @type {?}\n */\nShareButtonDirective.prototype.buttonClass;\n/**\n * Google analytics tracking\n * @type {?}\n */\nShareButtonDirective.prototype.gaTracking;\n/**\n * Share count event\n * @type {?}\n */\nShareButtonDirective.prototype.sbCount;\n/**\n * Share dialog opened event\n * @type {?}\n */\nShareButtonDirective.prototype.sbOpened;\n/**\n * Share dialog closed event\n * @type {?}\n */\nShareButtonDirective.prototype.sbClosed;\n/** @type {?} */\nShareButtonDirective.prototype.share;\n/** @type {?} */\nShareButtonDirective.prototype.renderer;\n/** @type {?} */\nShareButtonDirective.prototype.cd;\n}\n\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nexport class NFormatterPipe implements PipeTransform {\n/**\n * @param {?} num\n * @param {?=} digits\n * @return {?}\n */\ntransform(num: any, digits?: any): any {\n\n    if (typeof num !== 'number') {\n      num = 1;\n    }\n\n    return nFormatter(num, digits);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n  name: 'nFormatter'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NFormatterPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nNFormatterPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNFormatterPipe.ctorParameters;\n}\n\n/**\n * Change share counts to a readable number e.g 35.6k\n */\nexport const nFormatter = (num: number, digits: number) => {\n\n  const si = [\n    {value: 1E18, symbol: 'E'},\n    {value: 1E15, symbol: 'P'},\n    {value: 1E12, symbol: 'T'},\n    {value: 1E9, symbol: 'G'},\n    {value: 1E6, symbol: 'M'},\n    {value: 1E3, symbol: 'K'}\n  ], rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n\n  for (let i = 0; i < si.length; i++) {\n    if (num >= si[i].value) {\n      return (num / si[i].value).toFixed(digits).replace(rx, '$1') + si[i].symbol;\n    }\n  }\n  return num.toFixed(digits).replace(rx, '$1');\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  ViewChild,\n  ChangeDetectorRef,\n  ElementRef,\n  HostBinding\n} from '@angular/core';\n\nimport { ShareButtonDirective } from '../../directives/share-button.directive';\nimport { ShareButtonsService } from '../../services/share-buttons.service';\nexport class ShareButtonComponent implements OnDestroy {\n/**\n * Share URL\n */\nurl: string;\n/**\n * Share count value\n */\nshareCount: number;\n/**\n * Button name e.g. fb, twitter, reddit...etc\n */\nbutton: string;\n/**\n * @param {?} button\n * @return {?}\n */\nset createButton(button: string) {\n    this.shareCount = 0;\n    this.button = button;\n  }\n/**\n * on set share URL\n * @param {?} newUrl\n * @return {?}\n */\nset setUrl(newUrl: string) {\n    /** Reset share count when url changes */\n    this.shareCount = 0;\n    this.url = newUrl;\n  }\n/**\n * Share meta tags\n */\ntitle: string;\n   description: string;\n   image: string;\n   tags: string;\n/**\n * Show button icon\n */\nshowIcon = true;\n/**\n * Show button name\n */\nshowName = false;\n/**\n * Button size\n */\nsize = this.share.size;\n/**\n * Get and display share count\n */\nshowCount = false;\n/**\n * @param {?} show\n * @return {?}\n */\nset setShowCount(show: boolean) {\n    this.showCount = show;\n    /** Subscribe to count event */\n\n    /** Check if sbCount has observers already, don't subscribe again */\n    if (!this.shareDirective.sbCount.observers.length) {\n\n      /** Subscribe to the directive count's event only if 'show' is true or 'sbCount' has observers */\n      if (this.showCount || this.count.observers.length) {\n        this.shareDirective.sbCount.subscribe(count => {\n          this.shareCount = count;\n          this.count.emit(count);\n          this.cd.markForCheck();\n        });\n      }\n\n    }\n\n  }\n/**\n * Button theme\n * @param {?} theme\n * @return {?}\n */\nset setTheme(theme: string) {\n    this.buttonClass = 'sb-button sb-' + theme;\n  }\n/**\n * Set theme as button class\n */\nbuttonClass = 'sb-button sb-' + this.share.theme;\n/**\n * Share count event\n */\ncount = new EventEmitter<number>();\n/**\n * Share dialog opened event\n */\nopened = new EventEmitter<string>();\n/**\n * Share dialog closed event\n */\nclosed = new EventEmitter<string>();\n/**\n * Share directive ref\n */\nshareDirective: ShareButtonDirective;\n/**\n * <ng-content> wrapper, used to add class e.g. sb-default, sb-text, sb-count\n */\ntemplate: ElementRef;\n/**\n * @param {?} cd\n * @param {?} share\n */\nconstructor(private cd: ChangeDetectorRef,\nprivate share: ShareButtonsService) {\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.shareDirective.sbCount.complete();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'share-button',\n  template: `\n    <button class=\"sb-wrapper\"\n            [shareButton]=\"button\"\n            [sbUrl]=\"url\"\n            [sbImage]=\"image\"\n            [sbTitle]=\"title\"\n            [sbDescription]=\"description\"\n            [sbTags]=\"tags\"\n            (sbOpened)=\"opened.emit($event)\"\n            (sbClosed)=\"closed.emit($event)\"\n            [class.sb-show-count]=\"showCount && shareCount\"\n            [class.sb-show-template]=\"template.innerText?.length\"\n            [class.sb-show-text]=\"showName && !template.childElementCount\"\n            [class.sb-show-icon]=\"showIcon && !template.childElementCount\"\n            [style.fontSize.px]=\"(1 + size/20) * 14\">\n\n      <div class=\"sb-inner\">\n\n        <!-- HIDE BUTTON'S ICON AND TEXT IF CUSTOM TEMPLATE IS USED -->\n\n        <div class=\"sb-content\" *ngIf=\"!template.childElementCount\">\n\n          <!-- BUTTON ICON -->\n          <div *ngIf=\"showIcon\" class=\"sb-icon\">\n            <i [class]=\"shareDirective.shareButton.prop.icon\" aria-hidden=\"true\"></i>\n          </div>\n\n          <!-- BUTTON TEXT -->\n          <div *ngIf=\"showName\" class=\"sb-text\">\n            {{ shareDirective.shareButton.prop.text }}\n          </div>\n\n        </div>\n\n        <!-- FOR CUSTOM TEMPLATE -->\n        <div #template class=\"sb-template\">\n          <ng-content></ng-content>\n        </div>\n\n        <!-- BUTTON COUNT -->\n        <div *ngIf=\"showCount && shareCount\" class=\"sb-count\">\n          <span>{{ shareCount | nFormatter }}</span>\n        </div>\n\n      </div>\n    </button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: ShareButtonsService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'createButton': [{ type: Input, args: ['button', ] },],\n'setUrl': [{ type: Input, args: ['url', ] },],\n'title': [{ type: Input },],\n'description': [{ type: Input },],\n'image': [{ type: Input },],\n'tags': [{ type: Input },],\n'showIcon': [{ type: Input },],\n'showName': [{ type: Input },],\n'size': [{ type: Input },],\n'setShowCount': [{ type: Input, args: ['showCount', ] },],\n'setTheme': [{ type: Input, args: ['theme', ] },],\n'buttonClass': [{ type: HostBinding, args: ['class', ] },],\n'count': [{ type: Output },],\n'opened': [{ type: Output },],\n'closed': [{ type: Output },],\n'shareDirective': [{ type: ViewChild, args: [ShareButtonDirective, ] },],\n'template': [{ type: ViewChild, args: ['template', ] },],\n};\n}\n\nfunction ShareButtonComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonComponent.ctorParameters;\n/** @type {?} */\nShareButtonComponent.propDecorators;\n/**\n * Share URL\n * @type {?}\n */\nShareButtonComponent.prototype.url;\n/**\n * Share count value\n * @type {?}\n */\nShareButtonComponent.prototype.shareCount;\n/**\n * Button name e.g. fb, twitter, reddit...etc\n * @type {?}\n */\nShareButtonComponent.prototype.button;\n/**\n * Share meta tags\n * @type {?}\n */\nShareButtonComponent.prototype.title;\n/** @type {?} */\nShareButtonComponent.prototype.description;\n/** @type {?} */\nShareButtonComponent.prototype.image;\n/** @type {?} */\nShareButtonComponent.prototype.tags;\n/**\n * Show button icon\n * @type {?}\n */\nShareButtonComponent.prototype.showIcon;\n/**\n * Show button name\n * @type {?}\n */\nShareButtonComponent.prototype.showName;\n/**\n * Button size\n * @type {?}\n */\nShareButtonComponent.prototype.size;\n/**\n * Get and display share count\n * @type {?}\n */\nShareButtonComponent.prototype.showCount;\n/**\n * Set theme as button class\n * @type {?}\n */\nShareButtonComponent.prototype.buttonClass;\n/**\n * Share count event\n * @type {?}\n */\nShareButtonComponent.prototype.count;\n/**\n * Share dialog opened event\n * @type {?}\n */\nShareButtonComponent.prototype.opened;\n/**\n * Share dialog closed event\n * @type {?}\n */\nShareButtonComponent.prototype.closed;\n/**\n * Share directive ref\n * @type {?}\n */\nShareButtonComponent.prototype.shareDirective;\n/**\n * <ng-content> wrapper, used to add class e.g. sb-default, sb-text, sb-count\n * @type {?}\n */\nShareButtonComponent.prototype.template;\n/** @type {?} */\nShareButtonComponent.prototype.cd;\n/** @type {?} */\nShareButtonComponent.prototype.share;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  ChangeDetectorRef,\n  QueryList,\n  ViewChildren,\n  OnInit,\n  HostBinding\n} from '@angular/core';\nimport { ShareButtonsService } from '../../services/share-buttons.service';\nimport { ShareButtonComponent } from '../share-button/share-button.component';\nexport class ShareButtonsComponent implements OnInit, OnDestroy {\n/**\n * Share URL\n */\nurl: string;\n/**\n * Share count value\n */\nshareCount: number;\n/**\n * Share Buttons array\n */\nbuttons: string[] = [];\n/**\n * Buttons to include\n */\nincludeButtons: string[] = this.share.buttons;\n/**\n * Buttons to exclude\n */\nexcludeButtons: string[] = [];\n/**\n * @param {?} includeButtons\n * @return {?}\n */\nset include(includeButtons: string[]) {\n    this.includeButtons = includeButtons;\n    this.buttons = this.includeButtons.filter((btn) => this.excludeButtons.indexOf(btn) < 0);\n  }\n/**\n * @param {?} excludeButtons\n * @return {?}\n */\nset exclude(excludeButtons: string[]) {\n    this.excludeButtons = excludeButtons;\n    this.buttons = this.includeButtons.filter((btn) => this.excludeButtons.indexOf(btn) < 0);\n  }\n/**\n * Number of buttons to show\n */\nshownButtons = this.includeButtons.length;\n  totalButtons;\n  showAll = false;\n/**\n * @param {?} shownCount\n * @return {?}\n */\nset setShownButtons(shownCount: number) {\n    this.shownButtons = shownCount;\n    this.totalButtons = this.buttons.length;\n    /** Set showAll to true if shown buttons count = selected buttons count */\n    this.showAll = this.shownButtons === this.totalButtons + 1;\n  }\n/**\n * Set share URL\n * @param {?} newUrl\n * @return {?}\n */\nset setUrl(newUrl: string) {\n    /** Reset share count on url changes */\n    this.shareCount = 0;\n    this.url = newUrl;\n  }\n/**\n * Share meta tags\n */\ntitle: string;\n   description: string;\n   image: string;\n   tags: string;\n/**\n * Show button icon\n */\nshowIcon = true;\n/**\n * Show button name\n */\nshowName = false;\n/**\n * Button size\n */\nsize: number;\n/**\n * Get and display share count\n */\nshowCount = false;\n/**\n * @param {?} show\n * @return {?}\n */\nset setShowCount(show: boolean) {\n    this.showCount = show;\n\n    if (this.shareComponents) {\n      /** Subscribe to count event */\n      this.shareComponents.forEach((shareComponent: ShareButtonComponent) => {\n\n        /** Check if sbCount has observers already, don't subscribe again */\n        if (!shareComponent.count.observers.length) {\n\n          /** Subscribe to the component count event (only if [showCount]=true) */\n          if (show || this.count.observers.length) {\n            shareComponent.count.subscribe(count => {\n              this.shareCount = count;\n              this.count.emit(count);\n              this.cd.markForCheck();\n            });\n          }\n        }\n      });\n    }\n  }\n/**\n * Buttons theme\n */\ntheme;\n/**\n * @param {?} theme\n * @return {?}\n */\nset setTheme(theme: string) {\n    /** Set buttons' theme to override the default theme */\n    this.theme = theme;\n    /** Set buttons' container theme */\n    this.containerClass = 'sb-group sb-' + theme;\n  }\n/**\n * Set theme as buttons' container class\n */\ncontainerClass = 'sb-group sb-' + this.share.theme;\n/**\n * Share count event\n */\ncount = new EventEmitter<number>();\n/**\n * Share dialog opened event\n */\nopened = new EventEmitter<string>();\n/**\n * Share dialog closed event\n */\nclosed = new EventEmitter<string>();\n/**\n * Share components ref\n */\nshareComponents: QueryList<ShareButtonComponent>;\n/**\n * @param {?} cd\n * @param {?} share\n */\nconstructor(private cd: ChangeDetectorRef,\npublic share: ShareButtonsService) {\n\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    /**  if use didn't select the buttons use all */\n    if (!this.excludeButtons.length) {\n      this.buttons = this.includeButtons.filter((btn) => this.excludeButtons.indexOf(btn) < 0);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.shareComponents.forEach((shareComponent: ShareButtonComponent) => {\n      shareComponent.count.unsubscribe();\n    });\n  }\n/**\n * @return {?}\n */\nmore() {\n    this.totalButtons = this.shownButtons;\n    this.shownButtons = this.buttons.length;\n    this.showAll = true;\n  }\n/**\n * @return {?}\n */\nless() {\n    this.shownButtons = this.totalButtons;\n    this.showAll = false;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'share-buttons',\n  template: `\n      <share-button *ngFor=\"let button of buttons | slice: 0:shownButtons\" [button]=\"button\" [theme]=\"theme\" [url]=\"url\"\n                    [title]=\"title\" [description]=\"description\" [image]=\"image\" [tags]=\"tags\"\n                    [showCount]=\"showCount\" [showIcon]=\"showIcon\" [showName]=\"showName\" [size]=\"size\"\n                    (opened)=\"opened.emit($event)\" (closed)=\"closed.emit($event)\"></share-button>\n\n      <!-- MORE BUTTON -->\n      <div *ngIf=\"showAll && shownButtons === buttons.length\"\n           [class]=\"'sb-button sb-' + theme\"\n           [style.fontSize.px]=\"(1 + size/20) * 14\">\n\n        <button class=\"sb-wrapper sb-more\"\n                [class.sb-show-text]=\"showName\"\n                [class.sb-show-icon]=\"showIcon\"\n                (click)=\"less()\">\n\n          <div class=\"sb-inner\">\n\n            <div class=\"sb-content\">\n              <div *ngIf=\"showIcon\" class=\"sb-icon\">\n                <i class=\"fa fa-minus\" aria-hidden=\"true\"></i>\n              </div>\n              <div *ngIf=\"showName\" class=\"sb-text\">less</div>\n            </div>\n\n          </div>\n        </button>\n      </div>\n\n      <div *ngIf=\"!showAll && shownButtons < buttons.length\"\n           [class]=\"'sb-button sb-' + theme\"\n           [style.fontSize.px]=\"(1 + size/20) * 14\">\n        <button class=\"sb-wrapper sb-more\"\n                [class.sb-show-text]=\"showName\"\n                [class.sb-show-icon]=\"showIcon\"\n                (click)=\"more()\">\n\n          <div class=\"sb-inner\">\n\n            <div class=\"sb-content\">\n\n              <div *ngIf=\"showIcon\" class=\"sb-icon\">\n                <i class=\"fa fa-ellipsis-h\" aria-hidden=\"true\"></i>\n              </div>\n              <div *ngIf=\"showName\" class=\"sb-text\">more</div>\n            </div>\n\n          </div>\n        </button>\n      </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: ShareButtonsService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'include': [{ type: Input, args: ['include', ] },],\n'exclude': [{ type: Input, args: ['exclude', ] },],\n'setShownButtons': [{ type: Input, args: ['show', ] },],\n'setUrl': [{ type: Input, args: ['url', ] },],\n'title': [{ type: Input },],\n'description': [{ type: Input },],\n'image': [{ type: Input },],\n'tags': [{ type: Input },],\n'showIcon': [{ type: Input },],\n'showName': [{ type: Input },],\n'size': [{ type: Input },],\n'setShowCount': [{ type: Input, args: ['showCount', ] },],\n'setTheme': [{ type: Input, args: ['theme', ] },],\n'containerClass': [{ type: HostBinding, args: ['class', ] },],\n'count': [{ type: Output },],\n'opened': [{ type: Output },],\n'closed': [{ type: Output },],\n'shareComponents': [{ type: ViewChildren, args: [ShareButtonComponent, ] },],\n};\n}\n\nfunction ShareButtonsComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nShareButtonsComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nShareButtonsComponent.ctorParameters;\n/** @type {?} */\nShareButtonsComponent.propDecorators;\n/**\n * Share URL\n * @type {?}\n */\nShareButtonsComponent.prototype.url;\n/**\n * Share count value\n * @type {?}\n */\nShareButtonsComponent.prototype.shareCount;\n/**\n * Share Buttons array\n * @type {?}\n */\nShareButtonsComponent.prototype.buttons;\n/**\n * Buttons to include\n * @type {?}\n */\nShareButtonsComponent.prototype.includeButtons;\n/**\n * Buttons to exclude\n * @type {?}\n */\nShareButtonsComponent.prototype.excludeButtons;\n/**\n * Number of buttons to show\n * @type {?}\n */\nShareButtonsComponent.prototype.shownButtons;\n/** @type {?} */\nShareButtonsComponent.prototype.totalButtons;\n/** @type {?} */\nShareButtonsComponent.prototype.showAll;\n/**\n * Share meta tags\n * @type {?}\n */\nShareButtonsComponent.prototype.title;\n/** @type {?} */\nShareButtonsComponent.prototype.description;\n/** @type {?} */\nShareButtonsComponent.prototype.image;\n/** @type {?} */\nShareButtonsComponent.prototype.tags;\n/**\n * Show button icon\n * @type {?}\n */\nShareButtonsComponent.prototype.showIcon;\n/**\n * Show button name\n * @type {?}\n */\nShareButtonsComponent.prototype.showName;\n/**\n * Button size\n * @type {?}\n */\nShareButtonsComponent.prototype.size;\n/**\n * Get and display share count\n * @type {?}\n */\nShareButtonsComponent.prototype.showCount;\n/**\n * Buttons theme\n * @type {?}\n */\nShareButtonsComponent.prototype.theme;\n/**\n * Set theme as buttons' container class\n * @type {?}\n */\nShareButtonsComponent.prototype.containerClass;\n/**\n * Share count event\n * @type {?}\n */\nShareButtonsComponent.prototype.count;\n/**\n * Share dialog opened event\n * @type {?}\n */\nShareButtonsComponent.prototype.opened;\n/**\n * Share dialog closed event\n * @type {?}\n */\nShareButtonsComponent.prototype.closed;\n/**\n * Share components ref\n * @type {?}\n */\nShareButtonsComponent.prototype.shareComponents;\n/** @type {?} */\nShareButtonsComponent.prototype.cd;\n/** @type {?} */\nShareButtonsComponent.prototype.share;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["url","method","id","params","nolog","source","userId","groupId","jsonrpc","key","apiVersion","item","Array","isArray","target","_i","sources","length","shift","isObject","Object","assign","_a","mergeDeep","_b","httpClient","options","buttonsMeta","ShareButtonsService","prop","http","this","FacebookButton","shareUrl","get","countUrl","filter","res","share","share_count","map","catch","err","Observable","empty","TwitterButton","args","description","via","tags","LinkedinButton","title","jsonp","count","TumblrButton","response","note_count","WhatsappButton","PinterestButton","document","ogDescription","querySelector","getAttribute","console","warn","image","ogImage","responseType","text","JSON","parse","replace","RedditButton","data","children","score","GoogleButton","body","getGoogleBody","post","result","metadata","globalCounts","StumbleButton","TelegramButton","EmailButton","email","CopyButton","copyURLToClipboard","directive","temp","shareButton","icon","of","take","do","decodeURIComponent","textArea","renderer","createElement","setStyle","setProperty","appendChild","el","select","execCommand","removeChild","_this","successText","successIcon","cd","markForCheck","failText","failIcon","delay","subscribe","PrintButton","window","print","VKontakteButton","Buttons","facebook","type","color","supportCount","androidUrl","iosUrl","twitter","google","linkedin","pinterest","reddit","tumblr","stumble","telegram","vk","copy","whatsapp","OPTIONS","InjectionToken","BUTTONS_META","meta","theme","dialogWidth","dialogHeight","include","allButtons","exclude","size","gaTracking","twitterAccount","btn","indexOf","buttonName","toLowerCase","userAgent","navigator","vendor","test","Injectable","HttpClient","undefined","decorators","Inject","UniversalSupportService","e","global","universal","EventEmitter","nativeElement","nativeWindow","ShareButtonDirective","button","createShareButton","Error","removeClass","buttonClass","addClass","getCount","validateUrl","encodeURIComponent","location","href","link","sbTitle","sbDescription","sbImage","sbTags","mobile","getMobileOS","ga","popUp","open","dialogSize","sbOpened","emit","sbClosed","observers","pollTimer_1","setInterval","closed","clearInterval","sbCount","Directive","selector","Renderer2","ChangeDetectorRef","ElementRef","Input","createButton","sbUrl","Output","onClick","HostListener","NFormatterPipe","num","digits","nFormatter","Pipe","name","si","value","symbol","rx","i","toFixed","ShareDirectiveModule","ngModule","providers","provide","useValue","useFactory","ShareButtonsFactory","deps","NgModule","declarations","imports","CommonModule","HttpClientModule","HttpClientJsonpModule","exports","ShareButtonComponent","shareCount","newUrl","show","showCount","shareDirective","complete","Component","template","changeDetection","ChangeDetectionStrategy","OnPush","setUrl","showIcon","showName","setShowCount","setTheme","HostBinding","opened","ViewChild","ShareButtonModule","buttons","includeButtons","ShareButtonsComponent","excludeButtons","shownCount","shownButtons","totalButtons","showAll","shareComponents","forEach","shareComponent","containerClass","unsubscribe","setShownButtons","ViewChildren","ShareButtonsModule"],"mappings":"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"}